"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * A helper library for handling pagination.
 *
 * @param {Client} client the client to make the API calls against
 * @protected
 */
var Pagination = /*#__PURE__*/function () {
  function Pagination(client) {
    _classCallCheck(this, Pagination);

    this.client = client;
  }
  /**
   * Fetch the page for the given page name, and make the next API call based on
   * the previous request made.
   *
   * @param  {type} pageName the name of the page to fetch, should be available
   *    as a link in the meta links in the response
   * @param  {type} response the response containing the links to the next pages,
   *   and the request used to make the previous call
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @protected
   */


  _createClass(Pagination, [{
    key: "page",
    value: function page(pageName, response) {
      var pageNumber = this.pageNumber(response, pageName);

      if (pageNumber) {
        return this.call(response.request, pageNumber);
      } else {
        return this.nullPromise();
      }
    } // PRIVATE

    /**
     * Makes a new call for the new page number
     *
     * @param  {type} request    the request used to make the previous call
     * @param  {type} pageNumber the page number to fetch
     * @return {Promise.<Response,ResponseError>} a Bluebird Promise
     * @private
     */

  }, {
    key: "call",
    value: function call(request, pageNumber) {
      var params = request.params || {};
      params['page'] = params['page'] || {};
      params['page']['offset'] = pageNumber;
      return this.client.request(request.verb, request.path, params);
    }
    /**
     * Tries to determine the page number from the page name. If not present, it
     * just returns null
     *
     * @param  {type} response the response containing the links to the next pages
     * @param  {type} pageName the name of the page to fetch
     * @return {number}
     * @private
     */

  }, {
    key: "pageNumber",
    value: function pageNumber(response, pageName) {
      try {
        return response.result['meta']['links'][pageName].split('=').pop();
      } catch (TypeError) {
        return null;
      }
    }
    /**
     * Returns a Promise that always resolves to null
     *
     * @return {Promise} a Promise that always resolves to null
     * @private
     */

  }, {
    key: "nullPromise",
    value: function nullPromise() {
      return new Promise(function (resolve) {
        resolve(null);
      });
    }
  }]);

  return Pagination;
}();

var _default = Pagination;
exports["default"] = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYWdpbmF0aW9uIiwiY2xpZW50IiwicGFnZU5hbWUiLCJyZXNwb25zZSIsInBhZ2VOdW1iZXIiLCJjYWxsIiwicmVxdWVzdCIsIm51bGxQcm9taXNlIiwicGFyYW1zIiwidmVyYiIsInBhdGgiLCJyZXN1bHQiLCJzcGxpdCIsInBvcCIsIlR5cGVFcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FtYWRldXMvY2xpZW50L3BhZ2luYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIGhlbHBlciBsaWJyYXJ5IGZvciBoYW5kbGluZyBwYWdpbmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnQgdGhlIGNsaWVudCB0byBtYWtlIHRoZSBBUEkgY2FsbHMgYWdhaW5zdFxuICogQHByb3RlY3RlZFxuICovXG5jbGFzcyBQYWdpbmF0aW9uIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIHBhZ2UgZm9yIHRoZSBnaXZlbiBwYWdlIG5hbWUsIGFuZCBtYWtlIHRoZSBuZXh0IEFQSSBjYWxsIGJhc2VkIG9uXG4gICAqIHRoZSBwcmV2aW91cyByZXF1ZXN0IG1hZGUuXG4gICAqXG4gICAqIEBwYXJhbSAge3R5cGV9IHBhZ2VOYW1lIHRoZSBuYW1lIG9mIHRoZSBwYWdlIHRvIGZldGNoLCBzaG91bGQgYmUgYXZhaWxhYmxlXG4gICAqICAgIGFzIGEgbGluayBpbiB0aGUgbWV0YSBsaW5rcyBpbiB0aGUgcmVzcG9uc2VcbiAgICogQHBhcmFtICB7dHlwZX0gcmVzcG9uc2UgdGhlIHJlc3BvbnNlIGNvbnRhaW5pbmcgdGhlIGxpbmtzIHRvIHRoZSBuZXh0IHBhZ2VzLFxuICAgKiAgIGFuZCB0aGUgcmVxdWVzdCB1c2VkIHRvIG1ha2UgdGhlIHByZXZpb3VzIGNhbGxcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgQmx1ZWJpcmQgUHJvbWlzZVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwYWdlKHBhZ2VOYW1lLCByZXNwb25zZSkge1xuICAgIGxldCBwYWdlTnVtYmVyID0gdGhpcy5wYWdlTnVtYmVyKHJlc3BvbnNlLCBwYWdlTmFtZSk7XG5cbiAgICBpZiAocGFnZU51bWJlcikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbChyZXNwb25zZS5yZXF1ZXN0LCBwYWdlTnVtYmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubnVsbFByb21pc2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBQUklWQVRFXG5cblxuICAvKipcbiAgICogTWFrZXMgYSBuZXcgY2FsbCBmb3IgdGhlIG5ldyBwYWdlIG51bWJlclxuICAgKlxuICAgKiBAcGFyYW0gIHt0eXBlfSByZXF1ZXN0ICAgIHRoZSByZXF1ZXN0IHVzZWQgdG8gbWFrZSB0aGUgcHJldmlvdXMgY2FsbFxuICAgKiBAcGFyYW0gIHt0eXBlfSBwYWdlTnVtYmVyIHRoZSBwYWdlIG51bWJlciB0byBmZXRjaFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBCbHVlYmlyZCBQcm9taXNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYWxsKHJlcXVlc3QsIHBhZ2VOdW1iZXIpIHtcbiAgICBsZXQgcGFyYW1zID0gcmVxdWVzdC5wYXJhbXMgfHwge307XG4gICAgcGFyYW1zWydwYWdlJ10gPSBwYXJhbXNbJ3BhZ2UnXSB8fCB7fTtcbiAgICBwYXJhbXNbJ3BhZ2UnXVsnb2Zmc2V0J10gPSBwYWdlTnVtYmVyO1xuXG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnJlcXVlc3QoXG4gICAgICByZXF1ZXN0LnZlcmIsXG4gICAgICByZXF1ZXN0LnBhdGgsXG4gICAgICBwYXJhbXNcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWVzIHRvIGRldGVybWluZSB0aGUgcGFnZSBudW1iZXIgZnJvbSB0aGUgcGFnZSBuYW1lLiBJZiBub3QgcHJlc2VudCwgaXRcbiAgICoganVzdCByZXR1cm5zIG51bGxcbiAgICpcbiAgICogQHBhcmFtICB7dHlwZX0gcmVzcG9uc2UgdGhlIHJlc3BvbnNlIGNvbnRhaW5pbmcgdGhlIGxpbmtzIHRvIHRoZSBuZXh0IHBhZ2VzXG4gICAqIEBwYXJhbSAge3R5cGV9IHBhZ2VOYW1lIHRoZSBuYW1lIG9mIHRoZSBwYWdlIHRvIGZldGNoXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHBhZ2VOdW1iZXIocmVzcG9uc2UsIHBhZ2VOYW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiByZXNwb25zZS5yZXN1bHRbJ21ldGEnXVsnbGlua3MnXVtwYWdlTmFtZV0uc3BsaXQoJz0nKS5wb3AoKTtcbiAgICB9IGNhdGNoIChUeXBlRXJyb3IpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IGFsd2F5cyByZXNvbHZlcyB0byBudWxsXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEgUHJvbWlzZSB0aGF0IGFsd2F5cyByZXNvbHZlcyB0byBudWxsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBudWxsUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgeyByZXNvbHZlKG51bGwpOyB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYWdpbmF0aW9uO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ01BLFU7RUFDSixvQkFBWUMsTUFBWixFQUFvQjtJQUFBOztJQUNsQixLQUFLQSxNQUFMLEdBQWNBLE1BQWQ7RUFDRDtFQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O1dBQ0UsY0FBS0MsUUFBTCxFQUFlQyxRQUFmLEVBQXlCO01BQ3ZCLElBQUlDLFVBQVUsR0FBRyxLQUFLQSxVQUFMLENBQWdCRCxRQUFoQixFQUEwQkQsUUFBMUIsQ0FBakI7O01BRUEsSUFBSUUsVUFBSixFQUFnQjtRQUNkLE9BQU8sS0FBS0MsSUFBTCxDQUFVRixRQUFRLENBQUNHLE9BQW5CLEVBQTRCRixVQUE1QixDQUFQO01BQ0QsQ0FGRCxNQUVPO1FBQ0wsT0FBTyxLQUFLRyxXQUFMLEVBQVA7TUFDRDtJQUNGLEMsQ0FFRDs7SUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O1dBQ0UsY0FBS0QsT0FBTCxFQUFjRixVQUFkLEVBQTBCO01BQ3hCLElBQUlJLE1BQU0sR0FBR0YsT0FBTyxDQUFDRSxNQUFSLElBQWtCLEVBQS9CO01BQ0FBLE1BQU0sQ0FBQyxNQUFELENBQU4sR0FBaUJBLE1BQU0sQ0FBQyxNQUFELENBQU4sSUFBa0IsRUFBbkM7TUFDQUEsTUFBTSxDQUFDLE1BQUQsQ0FBTixDQUFlLFFBQWYsSUFBMkJKLFVBQTNCO01BRUEsT0FBTyxLQUFLSCxNQUFMLENBQVlLLE9BQVosQ0FDTEEsT0FBTyxDQUFDRyxJQURILEVBRUxILE9BQU8sQ0FBQ0ksSUFGSCxFQUdMRixNQUhLLENBQVA7SUFLRDtJQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztXQUNFLG9CQUFXTCxRQUFYLEVBQXFCRCxRQUFyQixFQUErQjtNQUM3QixJQUFJO1FBQ0YsT0FBT0MsUUFBUSxDQUFDUSxNQUFULENBQWdCLE1BQWhCLEVBQXdCLE9BQXhCLEVBQWlDVCxRQUFqQyxFQUEyQ1UsS0FBM0MsQ0FBaUQsR0FBakQsRUFBc0RDLEdBQXRELEVBQVA7TUFDRCxDQUZELENBRUUsT0FBT0MsU0FBUCxFQUFrQjtRQUNsQixPQUFPLElBQVA7TUFDRDtJQUNGO0lBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O1dBQ0UsdUJBQWM7TUFDWixPQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCO1FBQUVBLE9BQU8sQ0FBQyxJQUFELENBQVA7TUFBZ0IsQ0FBaEQsQ0FBUDtJQUNEOzs7Ozs7ZUFHWWhCLFUifQ==