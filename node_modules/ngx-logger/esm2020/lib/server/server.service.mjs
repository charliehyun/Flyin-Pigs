import { HttpHeaders, HttpParams, HttpRequest, HttpResponse } from '@angular/common/http';
import { Injectable, Optional } from '@angular/core';
import { isObservable, of, throwError } from 'rxjs';
import { catchError, concatMap, filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class NGXLoggerServerService {
    constructor(httpBackend) {
        this.httpBackend = httpBackend;
    }
    /**
     * Transforms an error object into a readable string (taking only the stack)
     * This is needed because JSON.stringify would return "{}"
     * @param err the error object
     * @returns The stack of the error
     */
    secureErrorObject(err) {
        return err?.stack;
    }
    /**
     * Transforms the additional parameters to avoid any json error when sending the data to the server
     * Basically it just replaces unstringifiable object to a string mentioning an error
     * @param additional The additional data to be sent
     * @returns The additional data secured
     */
    secureAdditionalParameters(additional) {
        if (additional === null || additional === undefined) {
            return null;
        }
        return additional.map((next, idx) => {
            try {
                if (next instanceof Error) {
                    return this.secureErrorObject(next);
                }
                // We just want to make sure the JSON can be parsed, we do not want to actually change the type
                if (typeof next === 'object') {
                    JSON.stringify(next);
                }
                return next;
            }
            catch (e) {
                return `The additional[${idx}] value could not be parsed using JSON.stringify().`;
            }
        });
    }
    /**
     * Transforms the message so that it can be sent to the server
     * @param message the message to be sent
     * @returns the message secured
     */
    secureMessage(message) {
        try {
            if (message instanceof Error) {
                return this.secureErrorObject(message);
            }
            if (typeof message !== 'string') {
                message = JSON.stringify(message, null, 2);
            }
        }
        catch (e) {
            message = 'The provided "message" value could not be parsed with JSON.stringify().';
        }
        return message;
    }
    /**
     * Edits HttpRequest object before sending request to server
     * @param httpRequest default request object
     * @returns altered httprequest
     */
    alterHttpRequest(httpRequest) {
        return httpRequest;
    }
    /**
     * Sends request to server
     * @param url
     * @param logContent
     * @param options
     * @returns
     */
    logOnServer(url, logContent, options) {
        if (!this.httpBackend) {
            console.error('NGXLogger : Can\'t log on server because HttpBackend is not provided. You need to import HttpClientModule');
            return of(null);
        }
        // HttpBackend skips all HttpInterceptors
        // They may log errors using this service causing circular calls
        let defaultRequest = new HttpRequest('POST', url, logContent, options || {});
        let finalRequest = of(defaultRequest);
        const alteredRequest = this.alterHttpRequest(defaultRequest);
        if (isObservable(alteredRequest)) {
            finalRequest = alteredRequest;
        }
        else if (alteredRequest) {
            finalRequest = of(alteredRequest);
        }
        else {
            console.warn('NGXLogger : alterHttpRequest returned an invalid request. Using default one instead');
        }
        return finalRequest.pipe(concatMap(req => {
            if (!req) {
                console.warn('NGXLogger : alterHttpRequest returned an invalid request (observable). Using default one instead');
                return this.httpBackend.handle(defaultRequest);
            }
            return this.httpBackend.handle(req);
        }), filter(e => e instanceof HttpResponse), map((httpResponse) => httpResponse.body));
    }
    /**
     * Customise the data sent to the API
     * @param metadata the data provided by NGXLogger
     * @returns the data that will be sent to the API in the body
     */
    customiseRequestBody(metadata) {
        // In our API the body is not customised
        return metadata;
    }
    sendToServer(metadata, config) {
        // Copying metadata locally because we don't want to change the object for the caller
        const localMetadata = { ...metadata };
        localMetadata.additional = this.secureAdditionalParameters(localMetadata.additional);
        localMetadata.message = this.secureMessage(localMetadata.message);
        // Allow users to customise the data sent to the API
        const requestBody = this.customiseRequestBody(localMetadata);
        const headers = config.customHttpHeaders || new HttpHeaders();
        if (!headers.has('Content-Type')) {
            headers.set('Content-Type', 'application/json');
        }
        this.logOnServer(config.serverLoggingUrl, requestBody, {
            headers,
            params: config.customHttpParams || new HttpParams(),
            responseType: config.httpResponseType || 'json',
            withCredentials: config.withCredentials || false,
        }).pipe(catchError(err => {
            // Do not use NGXLogger here because this could cause an infinite loop 
            console.error('NGXLogger: Failed to log on server', err);
            return throwError(err);
        })).subscribe();
    }
}
/** @nocollapse */ /** @nocollapse */ NGXLoggerServerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerServerService, deps: [{ token: i1.HttpBackend, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ NGXLoggerServerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerServerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerServerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpBackend, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,