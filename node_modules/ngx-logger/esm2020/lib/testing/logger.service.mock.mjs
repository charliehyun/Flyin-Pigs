import { Injectable } from "@angular/core";
import { NgxLoggerLevel } from '../types/logger-level.enum';
import * as i0 from "@angular/core";
// todo bmtheo, there should be an interface or something to make sure this mock sticks to the real API
export class NGXLoggerMock {
    get level() {
        return NgxLoggerLevel.ERROR;
    }
    get serverLogLevel() {
        return NgxLoggerLevel.OFF;
    }
    trace(message, ...additional) {
    }
    debug(message, ...additional) {
    }
    info(message, ...additional) {
    }
    log(message, ...additional) {
    }
    warn(message, ...additional) {
    }
    error(message, ...additional) {
    }
    fatal(message, ...additional) {
    }
    updateConfig(config) {
    }
    setCustomHttpHeaders(headers) {
    }
    setCustomParams(params) {
    }
    registerMonitor(monitor) {
    }
    setWithCredentialsOptionValue(withCredentials) {
    }
    getConfigSnapshot() {
        return { level: NgxLoggerLevel.ERROR };
    }
}
/** @nocollapse */ /** @nocollapse */ NGXLoggerMock.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerMock, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ NGXLoggerMock.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerMock });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerMock, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvdGVzdGluZy9sb2dnZXIuc2VydmljZS5tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQUU1RCx1R0FBdUc7QUFFdkcsTUFBTSxPQUFPLGFBQWE7SUFFeEIsSUFBSSxLQUFLO1FBQ1AsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDO0lBQzVCLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBMkIsRUFBRSxHQUFHLFVBQWlCO0lBQ3ZELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBMkIsRUFBRSxHQUFHLFVBQWlCO0lBQ3ZELENBQUM7SUFFRCxJQUFJLENBQUMsT0FBMkIsRUFBRSxHQUFHLFVBQWlCO0lBQ3RELENBQUM7SUFFRCxHQUFHLENBQUMsT0FBMkIsRUFBRSxHQUFHLFVBQWlCO0lBQ3JELENBQUM7SUFFRCxJQUFJLENBQUMsT0FBMkIsRUFBRSxHQUFHLFVBQWlCO0lBQ3RELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBMkIsRUFBRSxHQUFHLFVBQWlCO0lBQ3ZELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBMkIsRUFBRSxHQUFHLFVBQWlCO0lBQ3ZELENBQUM7SUFFRCxZQUFZLENBQUMsTUFBVztJQUV4QixDQUFDO0lBRUQsb0JBQW9CLENBQUMsT0FBb0I7SUFDekMsQ0FBQztJQUVELGVBQWUsQ0FBQyxNQUFrQjtJQUNsQyxDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQTBCO0lBQzFDLENBQUM7SUFFRCw2QkFBNkIsQ0FBQyxlQUF3QjtJQUN0RCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsT0FBTyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekMsQ0FBQzs7Z0pBakRVLGFBQWE7b0pBQWIsYUFBYTsyRkFBYixhQUFhO2tCQUR6QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBJTkdYTG9nZ2VyQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2ljb25maWcnO1xyXG5pbXBvcnQgeyBJTkdYTG9nZ2VyTW9uaXRvciB9IGZyb20gJy4uL21vbml0b3IvaWxvZ2dlci1tb25pdG9yJztcclxuaW1wb3J0IHsgTmd4TG9nZ2VyTGV2ZWwgfSBmcm9tICcuLi90eXBlcy9sb2dnZXItbGV2ZWwuZW51bSc7XHJcblxyXG4vLyB0b2RvIGJtdGhlbywgdGhlcmUgc2hvdWxkIGJlIGFuIGludGVyZmFjZSBvciBzb21ldGhpbmcgdG8gbWFrZSBzdXJlIHRoaXMgbW9jayBzdGlja3MgdG8gdGhlIHJlYWwgQVBJXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5HWExvZ2dlck1vY2sge1xyXG5cclxuICBnZXQgbGV2ZWwoKTogTmd4TG9nZ2VyTGV2ZWwge1xyXG4gICAgcmV0dXJuIE5neExvZ2dlckxldmVsLkVSUk9SO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNlcnZlckxvZ0xldmVsKCk6IE5neExvZ2dlckxldmVsIHtcclxuICAgIHJldHVybiBOZ3hMb2dnZXJMZXZlbC5PRkY7XHJcbiAgfVxyXG5cclxuICB0cmFjZShtZXNzYWdlPzogYW55IHwgKCgpID0+IGFueSksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgfVxyXG5cclxuICBkZWJ1ZyhtZXNzYWdlPzogYW55IHwgKCgpID0+IGFueSksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgfVxyXG5cclxuICBpbmZvKG1lc3NhZ2U/OiBhbnkgfCAoKCkgPT4gYW55KSwgLi4uYWRkaXRpb25hbDogYW55W10pIHtcclxuICB9XHJcblxyXG4gIGxvZyhtZXNzYWdlPzogYW55IHwgKCgpID0+IGFueSksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgfVxyXG5cclxuICB3YXJuKG1lc3NhZ2U/OiBhbnkgfCAoKCkgPT4gYW55KSwgLi4uYWRkaXRpb25hbDogYW55W10pIHtcclxuICB9XHJcblxyXG4gIGVycm9yKG1lc3NhZ2U/OiBhbnkgfCAoKCkgPT4gYW55KSwgLi4uYWRkaXRpb25hbDogYW55W10pIHtcclxuICB9XHJcblxyXG4gIGZhdGFsKG1lc3NhZ2U/OiBhbnkgfCAoKCkgPT4gYW55KSwgLi4uYWRkaXRpb25hbDogYW55W10pIHtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUNvbmZpZyhjb25maWc6IGFueSkge1xyXG5cclxuICB9XHJcblxyXG4gIHNldEN1c3RvbUh0dHBIZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzKSB7XHJcbiAgfVxyXG5cclxuICBzZXRDdXN0b21QYXJhbXMocGFyYW1zOiBIdHRwUGFyYW1zKSB7XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck1vbml0b3IobW9uaXRvcjogSU5HWExvZ2dlck1vbml0b3IpIHtcclxuICB9XHJcblxyXG4gIHNldFdpdGhDcmVkZW50aWFsc09wdGlvblZhbHVlKHdpdGhDcmVkZW50aWFsczogYm9vbGVhbikge1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29uZmlnU25hcHNob3QoKTogSU5HWExvZ2dlckNvbmZpZyB7XHJcbiAgICByZXR1cm4geyBsZXZlbDogTmd4TG9nZ2VyTGV2ZWwuRVJST1IgfTtcclxuICB9XHJcbn1cclxuIl19