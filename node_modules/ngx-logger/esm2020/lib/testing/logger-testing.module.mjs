import { NgModule } from '@angular/core';
import { TOKEN_LOGGER_CONFIG } from '../config/iconfig';
import { TOKEN_LOGGER_CONFIG_ENGINE_FACTORY } from '../config/iconfig-engine-factory';
import { CustomNGXLoggerService } from '../custom-logger.service';
import { LoggerModule } from '../logger.module';
import { NGXLogger } from '../logger.service';
import { TOKEN_LOGGER_MAPPER_SERVICE } from '../mapper/imapper.service';
import { TOKEN_LOGGER_METADATA_SERVICE } from '../metadata/imetadata.service';
import { TOKEN_LOGGER_RULES_SERVICE } from '../rules/irules.service';
import { TOKEN_LOGGER_SERVER_SERVICE } from '../server/iserver.service';
import { NgxLoggerLevel } from '../types/logger-level.enum';
import { TOKEN_LOGGER_WRITER_SERVICE } from '../writer/iwriter.service';
import { NGXLoggerConfigEngineFactoryMock } from './config-engine-factory.mock';
import { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';
import { NGXLoggerMock } from './logger.service.mock';
import { NGXLoggerMapperServiceMock } from './mapper.service.mock';
import { NGXLoggerMetadataServiceMock } from './metadata.service.mock';
import { NGXLoggerRulesServiceMock } from './rules.service.mock';
import { NGXLoggerServerServiceMock } from './server.service.mock';
import { NGXLoggerWriterServiceMock } from './writer.service.mock';
import * as i0 from "@angular/core";
export class LoggerTestingModule {
}
/** @nocollapse */ /** @nocollapse */ LoggerTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ /** @nocollapse */ LoggerTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, imports: [LoggerModule] });
/** @nocollapse */ /** @nocollapse */ LoggerTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, providers: [
        { provide: NGXLogger, useClass: NGXLoggerMock },
        { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },
        { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },
        { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },
        { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },
        { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },
        { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },
        { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },
        { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
    ], imports: [[LoggerModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LoggerModule],
                    providers: [
                        { provide: NGXLogger, useClass: NGXLoggerMock },
                        { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },
                        { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },
                        { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },
                        { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },
                        { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },
                        { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },
                        { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },
                        { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi90ZXN0aW5nL2xvZ2dlci10ZXN0aW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDOUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFpQm5FLE1BQU0sT0FBTyxtQkFBbUI7O3NKQUFuQixtQkFBbUI7dUpBQW5CLG1CQUFtQixZQWJwQixZQUFZO3VKQWFYLG1CQUFtQixhQVpuQjtRQUNULEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFO1FBQy9DLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDM0UsRUFBRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsUUFBUSxFQUFFLGdDQUFnQyxFQUFFO1FBQzNGLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFFBQVEsRUFBRSw0QkFBNEIsRUFBRTtRQUNsRixFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUseUJBQXlCLEVBQUU7UUFDNUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO1FBQzlFLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTtRQUM5RSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7UUFDOUUsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO0tBQzFFLFlBWFEsQ0FBQyxZQUFZLENBQUM7MkZBYVosbUJBQW1CO2tCQWQvQixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztvQkFDdkIsU0FBUyxFQUFFO3dCQUNULEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFO3dCQUMvQyxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFO3dCQUMzRSxFQUFFLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxRQUFRLEVBQUUsZ0NBQWdDLEVBQUU7d0JBQzNGLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFFBQVEsRUFBRSw0QkFBNEIsRUFBRTt3QkFDbEYsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLHlCQUF5QixFQUFFO3dCQUM1RSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7d0JBQzlFLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTt3QkFDOUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO3dCQUM5RSxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7cUJBQzFFO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVE9LRU5fTE9HR0VSX0NPTkZJRyB9IGZyb20gJy4uL2NvbmZpZy9pY29uZmlnJztcclxuaW1wb3J0IHsgVE9LRU5fTE9HR0VSX0NPTkZJR19FTkdJTkVfRkFDVE9SWSB9IGZyb20gJy4uL2NvbmZpZy9pY29uZmlnLWVuZ2luZS1mYWN0b3J5JztcclxuaW1wb3J0IHsgQ3VzdG9tTkdYTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uL2N1c3RvbS1sb2dnZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IExvZ2dlck1vZHVsZSB9IGZyb20gJy4uL2xvZ2dlci5tb2R1bGUnO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFRPS0VOX0xPR0dFUl9NQVBQRVJfU0VSVklDRSB9IGZyb20gJy4uL21hcHBlci9pbWFwcGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUT0tFTl9MT0dHRVJfTUVUQURBVEFfU0VSVklDRSB9IGZyb20gJy4uL21ldGFkYXRhL2ltZXRhZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVE9LRU5fTE9HR0VSX1JVTEVTX1NFUlZJQ0UgfSBmcm9tICcuLi9ydWxlcy9pcnVsZXMuc2VydmljZSc7XHJcbmltcG9ydCB7IFRPS0VOX0xPR0dFUl9TRVJWRVJfU0VSVklDRSB9IGZyb20gJy4uL3NlcnZlci9pc2VydmVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBOZ3hMb2dnZXJMZXZlbCB9IGZyb20gJy4uL3R5cGVzL2xvZ2dlci1sZXZlbC5lbnVtJztcclxuaW1wb3J0IHsgVE9LRU5fTE9HR0VSX1dSSVRFUl9TRVJWSUNFIH0gZnJvbSAnLi4vd3JpdGVyL2l3cml0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IE5HWExvZ2dlckNvbmZpZ0VuZ2luZUZhY3RvcnlNb2NrIH0gZnJvbSAnLi9jb25maWctZW5naW5lLWZhY3RvcnkubW9jayc7XHJcbmltcG9ydCB7IEN1c3RvbU5HWExvZ2dlclNlcnZpY2VNb2NrIH0gZnJvbSAnLi9jdXN0b20tbG9nZ2VyLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlck1vY2sgfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXJNYXBwZXJTZXJ2aWNlTW9jayB9IGZyb20gJy4vbWFwcGVyLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlck1ldGFkYXRhU2VydmljZU1vY2sgfSBmcm9tICcuL21ldGFkYXRhLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlclJ1bGVzU2VydmljZU1vY2sgfSBmcm9tICcuL3J1bGVzLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlclNlcnZlclNlcnZpY2VNb2NrIH0gZnJvbSAnLi9zZXJ2ZXIuc2VydmljZS5tb2NrJztcclxuaW1wb3J0IHsgTkdYTG9nZ2VyV3JpdGVyU2VydmljZU1vY2sgfSBmcm9tICcuL3dyaXRlci5zZXJ2aWNlLm1vY2snO1xyXG5cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW0xvZ2dlck1vZHVsZV0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7IHByb3ZpZGU6IE5HWExvZ2dlciwgdXNlQ2xhc3M6IE5HWExvZ2dlck1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX0NPTkZJRywgdXNlVmFsdWU6IHsgbGV2ZWw6IE5neExvZ2dlckxldmVsLkVSUk9SIH0gfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX0NPTkZJR19FTkdJTkVfRkFDVE9SWSwgdXNlQ2xhc3M6IE5HWExvZ2dlckNvbmZpZ0VuZ2luZUZhY3RvcnlNb2NrIH0sXHJcbiAgICB7IHByb3ZpZGU6IFRPS0VOX0xPR0dFUl9NRVRBREFUQV9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyTWV0YWRhdGFTZXJ2aWNlTW9jayB9LFxyXG4gICAgeyBwcm92aWRlOiBUT0tFTl9MT0dHRVJfUlVMRVNfU0VSVklDRSwgdXNlQ2xhc3M6IE5HWExvZ2dlclJ1bGVzU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX01BUFBFUl9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyTWFwcGVyU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX1dSSVRFUl9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyV3JpdGVyU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX1NFUlZFUl9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyU2VydmVyU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogQ3VzdG9tTkdYTG9nZ2VyU2VydmljZSwgdXNlQ2xhc3M6IEN1c3RvbU5HWExvZ2dlclNlcnZpY2VNb2NrIH0sXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9nZ2VyVGVzdGluZ01vZHVsZSB7IH1cclxuIl19